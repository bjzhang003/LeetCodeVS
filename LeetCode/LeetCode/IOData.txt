先说一下C语言中fseek()的功能：
函数原型：int fseek(FILE *fp, LONG offset, int origin)
参数含义：fp 文件指针 offset 相对于origin规定的偏移位置量 origin 指针移动的起始位置，可设置为以下三种情况： SEEK_SET 文件开始位置 SEEK_CUR 文件当前位置 SEEK_END 文件结束位置
C++中seep()和seekg()函数功能
seekp：设置输出文件流的文件流指针位置
seekg：设置输入文件流的文件流指针位置
函数原型：
ostream& seekp( streampos pos );
ostream& seekp( streamoff off, ios::seek_dir dir );
istream& seekg( streampos pos );
istream& seekg( streamoff off, ios::seek_dir dir );
函数参数
pos：新的文件流指针位置值
off：需要偏移的值
dir：搜索的起始位置
dir参数用于对文件流指针的定位操作上，代表搜索的起始位置
在ios中定义的枚举类型：
enum seek_dir {beg, cur, end};
每个枚举常量的含义：
ios::beg：文件流的起始位置
ios::cur：文件流的当前位置
ios::end：文件流的结束位置

#pragma once
/*
这个文件主要是用来写文件流测试的
*/
#include<fstream>
#include<assert.h>
#include<iostream>
#include<string>
using namespace std;
class FileStreamTest {

public:
	static void FileTest()
	{
		ifstream in("IOData.txt");
		assert(in);
		in.seekg(0, ios::end);
		//基地址为文件结尾处，偏移地址为0，于是指针定位在文件的结尾处
		streampos sp = in.tellg();
		//sp为定位指针，因为它在文件的结束处，所以就是文件的大小
		cout << "FileSzie = " << sp << endl;
		in.seekg(-sp / 3, ios::end);
		//基地址为文件末，偏移地址为负，于是向前移动sp/3个字节
		streampos sp2 = in.tellg();
		cout << "from file topoint:" << sp2 << endl << endl;
		in.seekg(0, ios::beg);
		//基地址为文件头，偏移量为0，于是定位在文件头
		cout << in.rdbuf();
		//从头读出文件内容
		in.seekg(sp2);
		cout << endl << endl;
		cout << in.rdbuf() << endl; //从sp2开始读出文件内容
		//把从txt里面获得的文件存放到string里面去
		cout << endl << endl << "result = " << endl;
		//定位到文件的开头
		in.seekg(0, ios::beg);
		string filename = "";
		string temp;
		if (in)
		{
			while (getline(in, temp))
			{
				filename += temp;
				filename += '\n';
			}

			cout << filename << endl;
		}
		//从后面开始读数据
		int lineCount = 0;
		string myresult = "";
		const int linesLast = 3;
		//获取文件的后面的几行的数据
		for (auto it = filename.rbegin(); it != filename.rend() && lineCount <= linesLast; it++)
		{
			myresult = *it + myresult;
			if (*it == '\n')
			{
				lineCount++;
			}
		}
		cout << "lineCount = " << lineCount << endl;

		cout << "myresult = " << myresult << endl;

	}
};